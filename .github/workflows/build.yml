name: Build
on:
  workflow_call:
    inputs:
      is_release:
        description: 'Is this commit a version being released'
        required: true
        type: string

env:
  PROJ_NAME: orbit
  RUSTFLAGS: --deny warnings

jobs:
  build:
    strategy:
      matrix:
        target:
        - aarch64-apple-darwin
        # - aarch64-unknown-linux-musl
        # - arm-unknown-linux-musleabihf
        # - armv7-unknown-linux-musleabihf
        - x86_64-apple-darwin
        - x86_64-pc-windows-msvc
        - aarch64-pc-windows-msvc
        - x86_64-unknown-linux-musl
        - x86_64-unknown-linux-gnu
        include:
        - target: aarch64-apple-darwin
          os: macos-latest
          target_rustflags: ''
        # - target: aarch64-unknown-linux-musl
        #   os: ubuntu-latest
        #   target_rustflags: '--codegen linker=aarch64-linux-gnu-gcc'
        # - target: arm-unknown-linux-musleabihf
        #   os: ubuntu-latest
        #   target_rustflags: '--codegen linker=arm-linux-gnueabihf-gcc'
        # - target: armv7-unknown-linux-musleabihf
        #   os: ubuntu-latest
        #   target_rustflags: '--codegen linker=arm-linux-gnueabihf-gcc'
        - target: x86_64-apple-darwin
          os: macos-latest
          target_rustflags: ''
        - target: x86_64-pc-windows-msvc
          os: windows-latest
        - target: aarch64-pc-windows-msvc
          os: windows-latest
          target_rustflags: ''
        - target: x86_64-unknown-linux-musl
          os: ubuntu-latest
          target_rustflags: ''
        - target: x86_64-unknown-linux-gnu
          os: ubuntu-latest
          target_rustflags: ''
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Fetch repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 100
          fetch-tags: true

      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Setup mdbook
        uses: peaceiris/actions-mdbook@v2
        with:
          mdbook-version: 'latest'
      
      - name: Install python packages
        run: |
          pip install toml

      - name: Install AArch64 Toolchain
        if: ${{ matrix.target == 'aarch64-unknown-linux-musl' }}
        run: |
          sudo apt-get update
          sudo apt-get install gcc-aarch64-linux-gnu libc6-dev-i386

      - name: Install Musl Toolchain
        if: ${{ matrix.target == 'aarch64-unknown-linux-musl' || matrix.target == 'x86_64-unknown-linux-musl' }}
        run: |
          sudo apt-get update
          sudo apt-get install musl-tools
  
      - name: Install ARM Toolchain
        if: ${{ matrix.target == 'arm-unknown-linux-musleabihf' || matrix.target == 'armv7-unknown-linux-musleabihf' }}
        run: |
          sudo apt-get update
          sudo apt-get install gcc-arm-linux-gnueabihf musl-tools
  
      - name: Install AArch64 Toolchain (Windows)
        if: ${{ matrix.target == 'aarch64-pc-windows-msvc' }}
        run: |
          rustup target add aarch64-pc-windows-msvc

      - name: Identify current version
        run: |
          echo "VERSION=$(python ./tools/evalver.py --version)" >> $GITHUB_ENV

      - name: Encode the build version
        if: ${{ inputs.is_release == '0' }}
        run: |
          echo "GIT_DESC_VERSION=$(git describe --tags)" >> $GITHUB_ENV

      - name: Encode the release version
        if: ${{ inputs.is_release == '1' }}
        run: |
          echo "GIT_DESC_VERSION=$(python ./tools/evalver.py --version)" >> $GITHUB_ENV
        
      - name: Configure Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Enable Cargo caching
        uses: Swatinem/rust-cache@v2

      - name: Update application documentation
        run: python ./tools/mansync.py

      - name: Package
        id: package
        env:
          TARGET: ${{ matrix.target }}
          VERSION: ${{ env.VERSION }}
          GIT_DESC_VERSION: ${{ env.GIT_DESC_VERSION }}
          OS: ${{ matrix.os }}
          TARGET_RUSTFLAGS: ${{ matrix.target_rustflags }}
        run: ./tools/package

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJ_NAME }}-${{ env.VERSION }}-${{ matrix.target }}
          path: ${{ steps.package.outputs.archive }}