name: Build
on:
  workflow_call:
    inputs:
      is_release:
        description: 'Is this commit a version being released'
        required: true
        type: string

env:
  project: orbit

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-latest]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Fetch repository
        uses: actions/checkout@v4
        with:
          fetch-depth: '100'
          fetch-tags: 'true'

      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x
      
      - name: Install python packages
        run: |
          pip install toml

      - name: Encode as development version
        if: ${{ inputs.is_release == '0' }}
        run: |
          echo "GIT_DESC_VERSION=$(git describe --tags)" >> $GITHUB_ENV

      - name: Encode as release version
        if: ${{ inputs.is_release == '1' }}
        run: |
          echo "GIT_DESC_VERSION=$(python ./tools/evalver.py --version)" >> $GITHUB_ENV

      - name: Configure Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Enable Cargo caching
        uses: Swatinem/rust-cache@v2

      - name: Identify target triple and current version
        run: |
          echo "target=$(cargo run --bin target-triple --quiet)" >> $GITHUB_ENV
          echo "version=$(python ./tools/evalver.py --version)" >> $GITHUB_ENV

      - name: Update application documentation
        run: python ./tools/mansync.py

      - name: Build orbit binary
        run: cargo build --release --bin orbit

      - name: Test
        run: cargo test

      - name: Build installer binary
        run: cargo build --release --bin install

      - name: Package and compress binary executable
        run: python ./tools/pack.py ${{ env.version }}-${{ env.target }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.project }}-${{ env.version }}-${{ env.target }}
          path: ./${{ env.project }}-${{ env.version }}-${{ env.target }}.zip