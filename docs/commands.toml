# ------------------------------------------------------------------------------
# new             
# ------------------------------------------------------------------------------
[new]
name = "new"
summary = "create a new ip"
synopsis = "orbit new [options] <path>"
description = """
Creates a new ip at the target directory `<path>`. The path is assumed to not
already exist. A new directory will be created at the file system destination
that contains a minimal manifest and .orbitignore file.

If no name is supplied, then the ip's name defaults to the final directory name
taken from `<path>`. Using the `--name` option allows this field to be
explicitly set.

For initializing an already existing project into an ip, see the `init` 
command.
"""

args."<path>" = "Directory to create for the ip"

options."--name <name>" = "Set the resulting ip's name"
options."--lib <lib>" = "Set the resulting ip's library"

examples = """
orbit new gates
orbit new eecs/lab1 --name adder
"""

# ------------------------------------------------------------------------------
# init      
# ------------------------------------------------------------------------------
[init]
name = "init"
summary = "initialize an ip from an existing project"
synopsis = "orbit init [options] [<path>]"
description = """
Initializes an ip at the file system directory `<path>`. If not path is
provided, then it defaults to the current working directory. 

If no name is provided, then the resulting ip's name defaults to the 
directory's name. Using the `--name` option allows the ip's name to be 
explicitly set.

To create a new ip from a non-existing directory, see the `new` command.
"""

options."<path>" = "Directory to initialize"
options."--name <name>" = "Set the resulting ip's name"
options."--lib <lib>" = "Set the resulting ip's library"

examples = """
orbit init
orbit init projects/gates
orbit init --name adder
"""

# ------------------------------------------------------------------------------   
# view           
# ------------------------------------------------------------------------------
[view]
name = "view"
summary = "display metadata of an ip"
synopsis = "orbit view [options] [<ip>]"
description = """
Displays various bits of information about a particular ip. If no ip is
provided, then it displays information related to the local ip.

To display manifest information, no additional options are required.

To display the defined HDL design elements within the ip, use the `--units`
option. For non-local ip, its protected and private design elements are hidden
from the results. To display design elements of all visibility levels the
`--all` option must also be present.

To display the known versions for an ip, use the `--versions` option.
"""

options."<ip>" = "Ip specification"
options."--versions, -v" = "Display the list of known versions"
options."--units, -u" = "Display the HDL design elements defined for this ip"
options."--all, -a" = "Include any private or hidden results"

examples = """
orbit view --units
orbit view gates:1.0.0 -u --all
orbit view gates --versions
orbit view gates:1 -v
"""

# ------------------------------------------------------------------------------
# read          
# ------------------------------------------------------------------------------
[read]
name = "read"
summary = "lookup hdl source code"
synopsis = "orbit read [options] <unit>"
description = """
Navigates hdl source code to lookup requested hdl code snippets. Looking up
hdl source code to see its implementation can help gain a better understanding
of the code being reused in your current design.

By default, the resulting code is displayed to the console. To write the
results to a file for improved readability, use the `--save` option. Combining 
the `--locate` option with the `--save` option will append the line and column
number of the identified code snippet to the end of the resulting file path.

If no ip is provided by the `--ip` option, then it will assume to search the
local ip for the provided design unit.

The values for options `--start`, `--end`, and `--doc` must be valid hdl code. 
The code is interpreted in the native language of the provided design unit.

The `--doc` option will attempt to find the comments immediately preceding the
identified code snippet. 

A design unit must visible in order for it to return the respective source
code. When reading a design unit that exists within the local ip, it can be 
any visibility. When reading a design unit that exists outside of the
local ip, its visibility must be "public" or "protected". Design units that 
are set to "private" visibility are not allowed to be read outside of their
ip.

Every time this command is called, it attempts to clean the temporary
directory where it saves resulting files. To keep existing files on the next
call of this command, use the `--no-clean` option.
"""

args."<unit>" = "Read the file for this primary design unit"

options."--ip <spec>" = "Ip specification"
options."--doc <code>" = "Find the preceding comments to the code snippet"
options."--save" = "Write the results to a temporary read-only file"
options."--start <code>" = "Start the lookup after jumping to this code snippet"
options."--end <code>" = "Stop the lookup after finding this code snippet"
options."--limit <num>" = "Set a maximum number of source code lines to write"
options."--no-clean" = "Do not clean the temporary directory of existing files"
options."--locate" = "Append the line and column number to the resulting file"

examples = """
orbit read and_gate --limit 25
orbit read math_pkg --ip math --doc "function clog2" --start "package math_pkg"
orbit read math_pkg --ip math --doc "function flog2p1" --save --locate
"""

# ------------------------------------------------------------------------------ 
# get      
# ------------------------------------------------------------------------------
[get]
name = "get"
summary = "fetch an hdl unit for code integration"
synopsis = "orbit get [options] <unit>"
description = """
Returns hdl code snippets for the provided design unit to be integrated into 
the current design. The code snippets are returned in the native hdl
language of the identified design unit. Code snippets are designed to be
copy and pasted from the console to the current design for quick code 
integration.

If an ip is not provided with the `--ip` option, then it will search the local
ip for the requested design unit.

If the design unit is in VHDL with the `--instance` option being used without
the `--component` option, then it will return the direct instantiation code
style (VHDL-93 feature).

Copying unit instantiations into higher-level entities will not 
automatically track source code references across ips. In order to properly
establish source code reference tracking across ips, the local ip's manifest
must have an up to date `[dependencies]` table that lists all the ips from
which it references source code.

An identifier prefix or suffix can be attached to the signal declarations and
the instantiation's port connection signals by using `--signal-prefix` and 
`--signal-suffix` respectively. These optional texts are treated as normal
strings and are not checked for correct hdl coding syntax.

When no output options are specified, this command by default will display
the unit's declaration.

A design unit must visible in order for it to return the respective code
snippets. When fetching a design unit that exists within the local ip, it
can be any visibility. When fetching a design unit that exists outside of the
local ip, its visibility must be "public". Design units that are set to 
"protected" or "private" visibility are not allowed to be referenced across
ips.

Exporting the unit's declaration information can be accomplished by using the
`--json` option. The valid json is produced with minimal formatting for
encouragement to be processed by other programs.
"""

args."<unit>" = "Primary design unit identifier"

options."--ip <spec>" = "Ip specification"
options."--json" = "Export the unit's information as valid json"
options."--library, -l" = "Display the unit's library declaration"
options."--component, -c" = "Display the unit's declaration"
options."--signals, -s" = "Display the constant and signal declarations"
options."--instance, -i" = "Display the unit's instantiation"
options."--architecture, -a" = "Display the unit's architectures"
options."--name <identifier>" = "Set the instance's identifier"
options."--signal-prefix <str>" = "Prepend information to the instance's signals"
options."--signal-suffix <str>" = "Append information to the instance's signals"

examples = """
orbit get and_gate --ip gates:1.0.0 --component
orbit get ram --ip mem:2 -csi
orbit get uart -si --name uart_inst0
orbit get or_gate --ip gates --json
"""

# ------------------------------------------------------------------------------     
# tree    
# ------------------------------------------------------------------------------
[tree]
name = "tree"
summary = "show the dependency graph"
synopsis = "orbit tree [options]"
description = """
Shows the hierarchical tree structure of the hardware design starting from a
root node.

By default, it will try to automatically detect the root node for the 
local ip. If there is ambiguity in determining what node can be the root, then 
all root nodes and their respective trees will be displayed. To only display
the tree of a particular node, use the `--root` option.

There are two trees available to view: hdl and ip. By default, the hdl
dependency graph is displayed. The hdl graph shows the composition of usable 
entities/modules. To generate this graph, it analyzes each VHDL architecture 
and ignores Verilog compiler directives. If an unidentified entity is 
instantiated, it will appear as a leaf in the graph and will be considered as 
a "black box" denoted by the "?" character next to its position in the tree.

Using the `--format` option can alter how much information is displayed for
each hdl design unit in the tree composition. By default, only the design
unit's name is displayed for each unit.

To display the ip dependency graph, use the `--ip` option.

If the tree's character output is not displaying properly, then the tree can
be displayed using a set of standard ASCII characters with the `--ascii`
option.
"""

options."--root <unit>" = "The uppermost hdl unit of the dependency tree"
# options."--compress" = "Replace duplicate branches with a unique label"
options."--format <fmt>" = "Determine how to display nodes ('long', 'short')"
options."--ascii" = "Limit the textual tree characters to the 128 ASCII set"
options."--ip" = "Switch to the ip dependency graph"

examples = """
orbit tree
orbit tree --root top --format long
orbit tree --ip --ascii
"""

# ------------------------------------------------------------------------------  
# lock     
# ------------------------------------------------------------------------------
[lock]
name = "lock"
summary = "save the world state of an ip"
synopsis = "orbit lock [options]"
description = """
Saves the state of the world for the local ip. To accomplish this, Orbit reads
the local ip's manifest file, "Orbit.toml", to resolve any missing ip 
dependencies. It writes the information required to reproduce this state to 
the ip's lockfile, "Orbit.lock".

A local ip must exist for this command to execute.

It is encouraged to check the lockfile into version control such that other
users trying to reconstruct the ip can reproduce the ip's current state. The 
lockfile should not be manually edited by the user.

To capture the world state for the local ip, Orbit downloads and installs any
unresolved ip dependencies. If an installed dependency's computed checksum 
does not match the checksum stored in the lockfile, it assumes the 
installation is corrupt and will reinstall the dependency to the cache.
"""

options."--force" = "Ignore reading the precomputed lock file"

examples = """
orbit lock
orbit lock --force
"""

# ------------------------------------------------------------------------------
# test      
# ------------------------------------------------------------------------------
[test]
name = "test"
alias = "t"
summary = "run a test"
synopsis = "orbit test [options] [--] [args]..."
description = """
This command prepares a given target and then executes the target.

While this command functions similar to `orbit build`, the targets that are 
encouraged to be used with this command are ones that are designed to either
"pass" or "fail", typically through a return code. This command requires a
testbench, if you do not want to set a testbench, see `orbit build`.

A target must be provided for the test command to run. A default target can
be specified in a configuration file, which will be used when a target is
omitted from the command-line.

If `--list` is used, then it will display a list of the available targets to
the user. Using `--list` in combination with a target from `--target` will
display any detailed help information the target has documented in its 
definition.

A target typically goes through three steps for the testing process:  
   1. Parse the blueprint file  
   2. Process the referenced files listed in the blueprint  
   3. Verify the hdl source code passes all tests

Any command-line arguments entered after the terminating flag `--` will be
passed in the received order as arguments to the subprocess's command. If a 
target already has defined arguments, the additional arguments passed from the 
command-line will follow the previously defined arguments.

The target's process will spawn from the current working ip's output directory,
which is $ORBIT_TARGET_DIR/$ORBIT_TARGET.
"""

options."--target <name>" = "Target to execute"
options."--dut <unit>" = "Set the device under test"
options."--tb <unit>" = "Set the top level testbench unit"
options."--plan <format>" = "Set the blueprint file format"
options."--target-dir <dir>" = "The relative directory where the target starts"
options."--command <path>" = "Overwrite the target's command"
options."--list" = "View available targets and exit"
options."--all" = "Include all hdl files of the working ip"
options."--fileset <key=glob>..." = "A glob-style pattern identified by name to include in the blueprint"
options."--no-clean" = "Do not clean the target folder before execution"
options."--force" = "Force the target to execute "
options."--verbose" = "Display the command being executed"
options."args" = "Arguments to pass to the target"

examples = """
orbit test --dut adder --tb adder_tb --target modelsim -- --lint
"""

# ------------------------------------------------------------------------------
# build, b       
# ------------------------------------------------------------------------------
[build]
name = "build"
alias = "b"
summary = "plan and execute a target"
synopsis = "orbit build [options] [--] [args]..."
description = """
This command prepares a given target and then executes the target.

While this command functions similar to `orbit test`, the targets that are 
encouraged to be used with this command are ones that produce artifacts at the
end of their execution process. This command does not allow the top to be a
testbench, if you want to set a testbench, see `orbit test`.

A target must be provided for the build command to run. A default target can
be specified in a configuration file, which will be used when a target is
omitted from the command-line.

If `--list` is used, then it will display a list of the available targets to
the user. Using `--list` in combination with a target from `--target` will
display any detailed help information the target has documented in its 
definition.

A target typically goes through three steps for the building process:  
   1. Parse the blueprint file  
   2. Process the referenced files listed in the blueprint  
   3. Generate a artifact(s)

Any command-line arguments entered after the terminating flag `--` will be
passed in the received order as arguments to the subprocess's command. If a 
target already has defined arguments, the additional arguments passed from the 
command-line will follow the previously defined arguments.

The target's process will spawn from the current working ip's output directory,
which is $ORBIT_TARGET_DIR/$ORBIT_TARGET.
"""

options."--target <name>" = "Target to execute"
options."--top <unit>" = "Set the top level design unit"
options."--plan <format>" = "Set the blueprint file format"
options."--target-dir <dir>" = "The relative directory where the target starts"
options."--command <path>" = "Overwrite the target's command"
options."--list" = "View available targets and exit"
options."--all" = "Include all hdl files of the working ip"
options."--fileset <key=glob>..." = "A glob-style pattern identified by name to include in the blueprint"
options."--force" = "Force the target to execute "
options."--no-clean" = "Do not clean the target folder before execution"
options."--verbose" = "Display the command being executed"
options."args" = "Arguments to pass to the target"

examples = """
orbit build --target xsim -- --elab
orbit build --command python3 --target pysim
orbit build --all --target-dir build --target ghdl
orbit build --target xsim --force -- --help
"""

# ------------------------------------------------------------------------------
# publish          
# ------------------------------------------------------------------------------
[publish]
name = "publish"
summary = "post an ip to a channel"
synopsis = "orbit publish [options]"
description = """
Performs a series of checks for a local ip and then releases it to its 
specified channel(s).

There are multiple checks that are performed before an ip can be published. 
First, the ip must have an up to date lockfile with no relative dependencies. 
The ip's manifest must also have a value for the source field. Lastly, Orbit 
must be able to construct the hdl source code graph without errors.

Posting an ip to a channel involves copying the ip's manifest file to a path 
within the channel known as the index. For every publish of an ip, the index 
corresponds to a unique path within the channel that gets created by Orbit.
A channel's pre-publish and post-publish hooks can get the value for the ip's 
index by reading the ORBIT_IP_INDEX environment variable.

By default, this command performs a dry run, which executes all of the steps 
in the process except for actually posting the ip to its channel(s). 
To run the command to completion, use the `--ready` option.
"""

options."--ready, -y" = "Run the operation to completion"
options."--list" = "View available channels and exit"

examples = """
orbit publish
orbit publish --ready
"""

# ------------------------------------------------------------------------------
# search          
# ------------------------------------------------------------------------------
[search]
name = "search"
summary = "browse the ip catalog"
synopsis = "orbit search [options] [<ip>]"
description = """
This command will display a list of all the known ip in the catalog. The catalog
consists of 3 levels: cache, downloads, and channels.

Any ip at the cache level are considered installed. Any ip at the downloads
level are considered downloaded. Any ip at the channels level is considered
available. An ip does not exist in the catalog if it is not found at any one
of the three defined levels.

When a package name is provided for `<ip>`, it will begin to partially match 
the name with the names of the known ip. If an ip's name begins with `<ip>`, it
is included in the filtered resultes. To strictly match the argument against an
ip name, use `--match`.
"""

options."<ip>" = "The beginning of a package name"
options."--install, -i" = "Filter ip installed to the cache"
options."--download, -d" = "Filter ip downloaded to the downloads"
options."--keyword <term>..." = "Include ip that contain this keyword"
options."--limit <num>" = "The maximum number of results to return"
options."--match" = "Return results that only pass each filter"

examples = """
orbit search axi
orbit search --keyword memory --keyword ecc
orbit search --keyword RF --limit 20
"""

# ------------------------------------------------------------------------------
# download        
# ------------------------------------------------------------------------------
# [download]
# name = "download"
# summary = "fetch packages from the internet"
# synopsis = "orbit download [options]"
# description = """
# This command will get a package from the internet using the default protocol
# or a user-defined protocol. It places the package in the path defined as
# environment variable `$ORBIT_ARCHIVE`.

# Downloads are vital to Orbit's management system as to avoid having to solely 
# rely on accessing the internet to get IP. Downloads allow Orbit to quickly
# repair broken installations and allow users to learn about IP before installing.

# When using a custom protocol, Orbit expects the final fetched repository to
# exist within a special directory called the queue. By default, the queue is set
# to a temporary directory, but it can be overridden with `--queue`. After a 
# protocol is executed, Orbit resumes the download process by trying to detect the 
# target IP and then performing a compression algorithm on the path to store as a 
# single file archive. This final archive is special and packed with additional 
# bytes, which makes it unsuitable to easily unzip with existing compression 
# tools.

# A lockfile is required to exist in the current IP in order to download its 
# dependencies.

# Variable substitution is supported when specifying the "command" and "args"
# fields for a protocol. Most notably, the queue is accessed as 
# `{{ orbit.queue }}`. See `orbit help protocols` for more information about 
# available variables.

# This action may automatically run during an install if the package is missing
# from the downloads. See `orbit help install` for more details.
# """

# options."--list" = "Print URLs and exit"
# options."--missing" = "Filter only uninstalled packages (default: true)"
# options."--all" = "Gather packages from all dependency types"
# options."--queue <dir>" = "Set the destination directory for placing fetched repositories"
# options."--verbose" = "Display the custom protocol being executed"
# options."--force" = "Download selected packages regardless of status"

# examples = """
# orbit download --missing --list
# orbit download --all --force
# """

# ------------------------------------------------------------------------------
# install         
# ------------------------------------------------------------------------------
[install]
name = "install"
summary = "store an immutable reference to an ip"
synopsis = "orbit install [options]"
description = """
This command will place an ip into the cache. By default, the specified version
is the 'latest' released version orbit can identify.

When this command is ran without specifying the <ip> or a source (such as
`--url` or `--path`), it will attempt to install the current working ip, if it
exists.

By default, any dependencies required only for development by the target ip are
omitted from installation. To also install these dependencies, use `--all`.

If a protocol is recognized using `--protocol`, then an optional tag can also 
be supplied to help the protocol with providing any additional information it
may require. 

To remove ip from the catalog, see the `remove` command.
"""

options."<ip>" = "Ip specification"
options."--url <url>" = "URL to install the ip from the internet"
options."--path <path>" = "Path to install the ip from local file system"
options."--protocol <name>" = "Use a configured protocol to download ip"
options."--tag <tag>" = "Unique tag to provide to the protocol"
options."--force" = "Install the ip regardless of the cache slot occupancy"
options."--list" = "View available protocols and exit"
options."--all" = "Install all dependencies (including development)"

examples = """
orbit install
orbit install lcd_driver:2.0
orbit install adder:1.0.0 --url https://my.adder/project.zip
orbit install alu:2.3.7 --path ./projects/alu --force 
"""

# ------------------------------------------------------------------------------
# remove      
# ------------------------------------------------------------------------------
[remove]
name = "remove"
summary = "delete an ip from the catalog"
synopsis = "orbit remove [options] <ip>"
description = """
Deletes save data for a known ip from the catalog. The ip's data for its
particular version is removed from the catalog's cache and the catalog's
archive.

By default, an interactive prompt will appear to confirm with the user if the 
correct ip is okay to be removed. To skip this interactive prompt and assume
it is correct without confirmation, use the `--force` option.

To add ip to the catalog, see the `install` command.
"""

args."<ip>" = "ip specification"

# options."--recurse, -r" = "Also remove the ip's dependencies"
options."--force" = "Skip interactive prompts"
options."--verbose" = "Display where the removal occurs"

examples = """
orbit remove gates
orbit remove gates:1.0.1 --force
"""

# ------------------------------------------------------------------------------
# env             
# ------------------------------------------------------------------------------
[env]
name = "env"
summary = "print orbit environment information"
synopsis = "orbit env [options]"
description = """
This command prints environment variables relevant to `orbit`.

By default, this command prins information as a shell script. If one or more
variable names are given as arguments as `<key>`, then it will print the value
of each provided variables on its own line.
"""

options."<key>..." = "Include this variable's value specifically in the environment information"

examples = """
orbit env
orbit env ORBIT_HOME
orbit env ORBIT_CACHE ORBIT_ARCHIVE
"""

# ------------------------------------------------------------------------------
# config          
# ------------------------------------------------------------------------------
[config]
name = "config"
summary = "modify configuration values"
synopsis = "orbit config [options]"
description = """
This command will alter configuration entries in Orbit's settings file named 
`config.toml`. By default, it will modify the user's config file found at
the path read from the environment variable `$ORBIT_HOME`.
  
To access an entry (key/value pair), use dots (`.`) to delimit between 
intermediate table identifiers and the final key identifier.

The command modifies the document in three independent stages. The first stage
modifies the settings by iterating through all defined `--append` values. Then, 
it will insert all `--set` values. Lastly, it will remove all `--unset` entries.
"""

options."--global" = "Access the home configuration file"
options."--local" = "Access the current project's configuration file"
options."--append <key=value>..." = "Add a value to the key storing a list"
options."--set <key=value>..." = "Write the value at the key's entry"
options."--unset <key>..." = "Delete the key's entry"

examples = """
orbit config --append include="~/.orbit/profiles/ks-tech"
orbit config --unset env.VIVADO_PATH --global
"""

# ------------------------------------------------------------------------------
# orbit      
# ------------------------------------------------------------------------------
[orbit]
summary = "orbit is an hdl package manager and build tool"
synopsis = "orbit [options] [command]"

options."--version" = "Print version information and exit"
options."--upgrade" = "check for the latest orbit binary"
options."--sync" = "synchronize configured channels"
options."--force" = "bypass interactive prompts"
options."--color <when>" = "coloring: auto, always, never"
options."--help, -h" = "print help information"
