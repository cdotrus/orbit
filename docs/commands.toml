# ------------------------------------------------------------------------------
# new             
# ------------------------------------------------------------------------------
[new]
name = "new"
summary = "create a new ip"
synopsis = "orbit new [options] <path>"
description = """
This command will create a new ip at the target directory `<path>`. The command
assumes the path does not already exists. It will attempt to create a new 
directory at the destination with a manifest. 

If no name is supplied, then the ip's name defaults to the final path component
of the path argument. Use the name option to provide a custom name.

This command fails if the path already exists. See the `init` command for
initializing an already existing project into an ip.
"""

args."<path>" = "The new directory to make"
options."--name <name>" = "The ip name to create"
options."--library <library>" = "The ip library"

examples = """
orbit new gates
orbit new ./projects/dir7 --name adder
"""

help = """
Create a new orbit ip project.

Usage:
    orbit new [options] <path>

Args:
    <path>              the destination path to create ip project

Options:
    --name <name>           the ip name to create
    --library <library>     the ip library
"""

# ------------------------------------------------------------------------------
# init      
# ------------------------------------------------------------------------------
[init]
name = "init"
summary = "initialize an ip from an existing project"
synopsis = "orbit init [options] [<path>]"
description = """
This command will initialize a new ip at the target directory `<path>`. If no path 
is supplied, then it defaults to the current working directory.

If no name is supplied, then the ip's name defaults to the final path component
of the path argument. Use the name option to provide a custom name.

This command fails if the path does not exist. See the `new` command for
creating an ip from a non-existing directory.
"""

options."<path>" = "The location to initialize an ip"
options."--name <name>" = "The name of the ip"
options."--library <library>" = "The ip library"
options."--force" = "Overwrite a manifest if one already exists"

examples = """
orbit init
orbit init ./projects/gates
orbit init --name hello_world
"""

help = """
Initialize a new ip from an existing project.

Usage:
    orbit init [options] [<path>]

Options:
    <path>                  destination path to initialize (default: '.')
    --name <name>           the name of the ip
    --library <library>     the ip library
    --force                 overwrite any existing manifest with a new one
"""

# ------------------------------------------------------------------------------   
# view           
# ------------------------------------------------------------------------------
[view]
name = "view"
summary = "display metadata of an ip"
synopsis = "orbit show [options] [<ip>]"
description = """
This command retrieves various pieces of information about a particular ip to
gain a better understanding of how to utilize the ip. By default, it displays
the ip's manifest, if and only if the ip is able to be located.

It will first attempt to return the information from a possible installation. If
one does not exist, then it searches the downloads location for the ip.

If `--units` is specified, then a list of the ip's HDL units are displayed.

If `--versions` is specified, then a list of the ip's already available versions
are displayed.

If no spec is provided for `<ip>`, then it will retrieve information based on the
local ip, if one exists.
"""

options."<ip>" = "The spec of the ip to query"
options."--versions, -v" = "Display the list of possible versions"
options."--units, -u" = "Display the list of HDL primary design units associated with this ip"
options."--all, -a" = "Include any private or hidden results"

examples = """
orbit view --units
orbit view gates:1.0.0 -u
orbit view gates --versions
"""

help = """
Display metadata of an ip.

Usage:
    orbit show [options] [<ip>]

Options:  
    <ip>                        the spec of the ip to query       
    --versions, -v              display the list of possible versions
    --units, -u                 display primary design units within an ip
    --all, -a                   include any private or hidden results
"""

# ------------------------------------------------------------------------------
# read          
# ------------------------------------------------------------------------------
[read]
name = "read"
summary = "navigate hdl design unit source code"
synopsis = "orbit read [options] <unit>"
description = """
This command allows the user to navigate source code to gain a quicker
understanding of the available code. By default, it will display the code to the
console.

If no ip specification is provided through the `--ip` option, then it will
assume to search the current working ip, if it exists.

If `--file` is provided, then the source code will be written to a temporary
read-only file. Also providing '--location' in this context will append the
requested code segment's line and column number to the end of the generated
filepath.

The options `--start`, `--end`, and `--doc` all accept valid VHDL code to
search for in the identified source code file. The `--doc` option will find the
immediate single-line comments preceding the supplied code value.

The `read` command attempts to clean the temporary directory at every call to
it. To keep existing files alive while allowing new files to appear, use the
`--keep` flag.
"""

args."<unit>" = "Primary design unit identifier"

options."--ip <spec>" = "The ip specification to search in the catalog"
options."--file" = "Copy the source code to a temporary read-only file"
options."--location" = "Append the targeted code segment's line and column number to the resulting filepath "
options."--keep" = "Do not clean the temporary directory of existing files"
options."--limit <num>" = "Set a maximum number of lines to write"
options."--start <code>" = "Start the code navigation upon matching this VHDL segment"
options."--end <code>" = "Stop the code navigation upon matching this VHDL segment"
options."--doc <code>" = "Navigate to the preceding comments of this VHDL segment"

examples = """
orbit read and_gate --ip gates:1.0.0
orbit read math_pkg --ip math --doc "function clog2"
orbit read math_pkg --ip math --start "package math_pkg" --doc "function flog2p1" --location --file
"""

help = """
Inspect hdl design unit source code.

Usage:
    orbit read [options] <unit>

Args:
    <unit>                  primary design unit identifier

Options:            
    --ip <spec>             ip to reference the unit from
    --location              append the :line:col to the filepath
    --file                  display the path to the read-only source code
    --keep                  prevent previous files read from being deleted
    --limit <num>           set a maximum number of lines to print
    --start <code>          tokens to begin reading contents from file
    --end <code>            tokens to end reading contents from file
    --doc <code>            series of tokens to find immediate comments for
"""

# ------------------------------------------------------------------------------ 
# get      
# ------------------------------------------------------------------------------
[get]
name = "get"
summary = "fetch an hdl entity for code integration"
synopsis = "orbit get [options] <unit>"
description = """
This command will provide the relevant information about the requested HDL 
entity required to integrate the code into the current design. The command
produces valid HDL code displayed to stdout that allows a user to copy and
paste the results into a new hdl source code file for proper hierarchy code
reuse.

If the spec if not provided with `--ip`, then it will search the current
working ip for the requested HDL entity.

If the `--instance` flag is used without the `--component` flag, then it will
display the direct instantiation style code for VHDL (VHDL-93 feature).

It is important to note that any units referenced from ip outside of the
current working ip are not automatically tracked as a dependency. In order to
add an ip as a dependency to properly reference its source code files, edit
the current working ip's manifest with a new entry under the `[dependencies]`
table with the dependency ip and its version.

An identifier prefix or suffix can be attached to the signal declarations and
the instantiation's port connection signals by using `--signal-prefix` and 
`--signal-suffix` respectively. These optional texts are treated as normal
strings and are not checked for correct syntax.

When no output options are specified, this command by default will display the
entity's component declaration.
"""

args."<unit>" = "Primary design unit identifier"
options."--ip <spec>" = "The ip that contains the requested unit"
options."--json" = "Export the entity information as valid json"
options."--library, -l" = "Display the unit's library declaration"
options."--component, -c" = "Display the component declaration"
options."--signals, -s" = "Display the constant and signal declarations"
options."--instance, -i" = "Display the unit's instantiation"
options."--architecture, -a" = "Display the detected architectures"
options."--name <identifier>" = "Set the instance's identifier"
options."--signal-prefix <value>" = "Prepend information to the instance's signals"
options."--signal-suffix <value>" = "Append information to the instance's signals"

examples = """
orbit get and_gate --ip gates:1.0.0 --component
orbit get ram --ip mem:2.0.3 -csi
orbit get uart -si --name u0
orbit get or_gate --ip gates --json
"""

help = """
Fetch an hdl entity for code integration.

Usage:
    orbit get [options] <unit>

Args:
    <unit>                  entity identifier

Options:
    --ip <spec>             ip to reference the unit from
    --json                  export the entity information as valid json
    --library,   -l         display library declaration
    --component, -c         display component declaration
    --signals,   -s         display constant and signal declarations
    --instance,  -i         display instantation
    --architecture, -a      display detected architectures
    --name <identifier>     set the instance's identifier
    --signal-prefix <value> prepend information to the instance's signals
    --signal-suffix <value> append information to the instance's signals
"""

# ------------------------------------------------------------------------------     
# tree    
# ------------------------------------------------------------------------------
[tree]
name = "tree"
summary = "view the dependency graph"
synopsis = "orbit tree [options]"
description = """
This command will show the hierarchical tree-structure starting from a node.
By default, it will attempt to automatically detect the root if it is
unambiguous and `--root` is not provided. This command only works when called
from the current working ip.

The hdl-level tree displays the connections between entities. The hdl tree does 
not show how many times an entity is instantiated within a parent entity, and 
all architectures for each entity are analyzed. If an unidentified entity is 
instantiated it will appear as a leaf and is denoted as a black box by a '?' 
character.

An entity is considered a black box if it cannot find that referenced entity's 
hdl source code file.

To view the dependency tree at the ip-level, use `--ip`.
"""

options."--root <unit>" = "The uppermost hdl unit to start the dependency tree"
options."--compress" = "Replace duplicate branches with a label marking"
options."--all" = "Include all possible roots in the tree"
options."--format <fmt>" = "Determine how to display nodes ('long', 'short')"
options."--ascii" = "Limit the textual tree characters to the 128 ASCII set"
options."--ip" = "View the dependency graph at the ip level"

examples = """
orbit tree --ip
orbit tree --root top --format long
orbit tree --ascii --all
"""

help = """
View the dependency graph.

Usage:
    orbit tree [options]

Options:
    --root <unit>       uppermost hdl unit to starting the dependency tree
    --compress          replace duplicate branches with a referenced label
    --all               include all possible roots in tree
    --format <fmt>      select how to display unit nodes: 'long' or 'short'
    --ascii             restrict tree chars to the original 128 ascii set
    --ip                view the dependency graph at the ip level
"""

# ------------------------------------------------------------------------------  
# lock     
# ------------------------------------------------------------------------------
[lock]
name = "lock"
summary = "save the world state of an ip"
synopsis = "orbit lock [options]"
description = """
This command saves the state of the world according to the working ip. To
accomplish this, Orbit reads working ip's manifest file to resolve any
missing dependencies. It's writes all the information that is necessary to
reproduce this state to the ip's lock file, Orbit.lock.

This command can only be ran within a working ip.

It is encouraged to check the lock file into version control such that others
trying to build the ip can reproduce the ip's current state. The lock file
should not be manually edited by the user.

To capture the state of the world according to the ip, this command will
download and install any unresolved dependencies. If an installed dependency's 
computed checksum does not match the checksum stored in the lock file, it 
assumes the installation to be corrupt and will re-install the dependency to 
the cache.
"""

options."--force" = "Ignore reading the precomputed lock file"

examples = """
orbit lock
orbit lock --force
"""

help = """
Save the state of the world for the ip.

Usage:
    orbit lock [options]              

Options:
    --force                 skip reading from the lock file
"""

# ------------------------------------------------------------------------------
# test      
# ------------------------------------------------------------------------------
[test]
name = "test"
summary = "run a test"
synopsis = "orbit test [options] [--] [args]..."
description = """
This command prepares a given target and then executes the target.

While this command functions similar to `orbit build`, the targets that are 
encouraged to be used with this command are ones that are designed to either
"pass" or "fail", typically through a return code. This command requires a
testbench, if you do not want to set a testbench, see `orbit build`.

A target must be provided for the test command to run. A default target can
be specified in a configuration file, which will be used when a target is
omitted from the command-line.

If `--list` is used, then it will display a list of the available targets to
the user. Using `--list` in combination with a target from `--target` will
display any detailed help information the target has documented in its 
definition.

A target typically goes through three steps for the testing process:  
   1. Parse the blueprint file  
   2. Process the referenced files listed in the blueprint  
   3. Verify the hdl source code passes all tests

Any command-line arguments entered after the terminating flag `--` will be
passed in the received order as arguments to the subprocess's command. If a 
target already has defined arguments, the additional arguments passed from the 
command-line will follow the previously defined arguments.

The target's process will spawn from the current working ip's output directory,
which is $ORBIT_TARGET_DIR/$ORBIT_TARGET.
"""

options."--target <name>" = "Target to execute"
options."--dut <unit>" = "Set the device under test"
options."--tb <unit>" = "Set the top level testbench unit"
options."--plan <format>" = "Set the blueprint file format"
options."--target-dir <dir>" = "The relative directory where the target starts"
options."--command <path>" = "Overwrite the target's command"
options."--list" = "View available targets and exit"
options."--all" = "Include all hdl files of the working ip"
options."--fileset <key=glob>..." = "A glob-style pattern identified by name to include in the blueprint"
options."--no-clean" = "Do not clean the target folder before execution"
options."--force" = "Force the target to execute "
options."--verbose" = "Display the command being executed"
options."args" = "Arguments to pass to the target"

examples = """
orbit test --dut adder --tb adder_tb --target modelsim -- --lint
"""

help = """
Run a test.

Usage:
    orbit test [options] [--] [args]...

Options:
    --target <name>         target to execute
    --dut <unit>            set the device under test
    --tb <unit>             set the top level testbench unit
    --plan <format>         set the blueprint file format
    --target-dir <dir>      the relative directory where the target starts
    --command <path>        overwrite the target's command
    --list                  view available targets and exit
    --all                   include all hdl files of the working ip
    --fileset <key=glob>... set filesets for the target
    --force                 force the target to execute
    --no-clean              do not clean the target folder before execution
    --verbose               display the command being executed
    args                    arguments to pass to the requested command
"""

# ------------------------------------------------------------------------------
# build, b       
# ------------------------------------------------------------------------------
[build]
name = "build"
summary = "plan and execute a target"
synopsis = "orbit build [options] [--] [args]..."
description = """
This command prepares a given target and then executes the target.

While this command functions similar to `orbit test`, the targets that are 
encouraged to be used with this command are ones that produce artifacts at the
end of their execution process. This command does not allow the top to be a
testbench, if you want to set a testbench, see `orbit test`.

A target must be provided for the build command to run. A default target can
be specified in a configuration file, which will be used when a target is
omitted from the command-line.

If `--list` is used, then it will display a list of the available targets to
the user. Using `--list` in combination with a target from `--target` will
display any detailed help information the target has documented in its 
definition.

A target typically goes through three steps for the building process:  
   1. Parse the blueprint file  
   2. Process the referenced files listed in the blueprint  
   3. Generate a artifact(s)

Any command-line arguments entered after the terminating flag `--` will be
passed in the received order as arguments to the subprocess's command. If a 
target already has defined arguments, the additional arguments passed from the 
command-line will follow the previously defined arguments.

The target's process will spawn from the current working ip's output directory,
which is $ORBIT_TARGET_DIR/$ORBIT_TARGET.
"""

options."--target <name>" = "Target to execute"
options."--top <unit>" = "Set the top level design unit"
options."--plan <format>" = "Set the blueprint file format"
options."--target-dir <dir>" = "The relative directory where the target starts"
options."--command <path>" = "Overwrite the target's command"
options."--list" = "View available targets and exit"
options."--all" = "Include all hdl files of the working ip"
options."--fileset <key=glob>..." = "A glob-style pattern identified by name to include in the blueprint"
options."--force" = "Force the target to execute "
options."--no-clean" = "Do not clean the target folder before execution"
options."--verbose" = "Display the command being executed"
options."args" = "Arguments to pass to the target"

examples = """
orbit build --target xsim -- --elab
orbit build --command python3 --target pysim
orbit build --all --target-dir build --target ghdl
orbit build --target xsim --force -- --help
"""

help = """
Plan and execute a target.

Usage:
    orbit build [options] [--] [args]...

Options:
    --target <name>         target to execute
    --top <unit>            set the top level design unit
    --plan <format>         set the blueprint file format
    --target-dir <dir>      the relative directory where the target starts
    --command <path>        overwrite the target's command
    --list                  view available targets and exit
    --all                   include all hdl files of the working ip
    --fileset <key=glob>... set filesets for the target
    --force                 force the target to execute
    --no-clean              do not clean the target folder before execution
    --verbose               display the command being executed
    args                    arguments to pass to the requested command
"""

# ------------------------------------------------------------------------------
# publish          
# ------------------------------------------------------------------------------
[publish]
name = "publish"
summary = "post an ip to a channel"
synopsis = "orbit publish [options]"
description = """
Performs a series of checks on a stable version of a local ip to then release it
through a channel.

For an ip to be published, it must have its source field defined that directs to
a valid internet location.

By default, it operates a dry run, performing all steps in the process except
for the actual release through the channel. To fully run the command, use the
`--ready` flag. When the ip is published, it will also be installed to the cache
by default. To skip this behavior, use the `--no-install` flag. 
"""

options."--ready, -y" = "Perform a full run"
options."--no-install" = "Skip installing the ip"
options."--list" = "View available channels and exit"

examples = """
orbit publish
orbit publish --ready
"""

help = """
Post an ip to a channel.

Usage:
    orbit publish [options]

Options:
    --ready, -y     perform a full run
    --no-install    skip installing the ip
    --list          view available channels and exit
"""

# ------------------------------------------------------------------------------
# search          
# ------------------------------------------------------------------------------
[search]
name = "search"
summary = "browse the ip catalog"
synopsis = "orbit search [options] [<ip>]"
description = """
This command will display a list of all the known ip in the catalog. The catalog
consists of 3 levels: cache, downloads, and channels.

Any ip at the cache level are considered installed. Any ip at the downloads
level are considered downloaded. Any ip at the channels level is considered
available. An ip does not exist in the catalog if it is not found at any one
of the three defined levels.

When a package name is provided for `<ip>`, it will begin to partially match 
the name with the names of the known ip. If an ip's name begins with `<ip>`, it
is included in the filtered resultes. To strictly match the argument against an
ip name, use `--match`.
"""

options."<ip>" = "The beginning of a package name"
options."--install, -i" = "Filter ip installed to the cache"
options."--download, -d" = "Filter ip downloaded to the downloads"
options."--keyword <term>..." = "Include ip that contain this keyword"
options."--limit <num>" = "The maximum number of results to return"
options."--match" = "Return results that only pass each filter"

examples = """
orbit search axi
orbit search --keyword memory --keyword ecc
orbit search --keyword RF --limit 20
"""

help = """
Browse the ip catalog.

Usage:
    orbit search [options] [<ip>]

Args:
    <ip>                filter the name of ip

Options:
    --install, -i       filter ip installed to cache
    --download, -d      filter ip downloaded to downloads
    --keyword <term>... special word to filter out packages
    --limit <num>       maximum number of results to return
    --match             only return results with each filter passed
"""

# ------------------------------------------------------------------------------
# download        
# ------------------------------------------------------------------------------
[download]
name = "download"
summary = "fetch packages from the internet"
synopsis = "orbit download [options]"
description = """
This command will get a package from the internet using the default protocol
or a user-defined protocol. It places the package in the path defined as
environment variable `$ORBIT_ARCHIVE`.

Downloads are vital to Orbit's management system as to avoid having to solely 
rely on accessing the internet to get IP. Downloads allow Orbit to quickly
repair broken installations and allow users to learn about IP before installing.

When using a custom protocol, Orbit expects the final fetched repository to
exist within a special directory called the queue. By default, the queue is set
to a temporary directory, but it can be overridden with `--queue`. After a 
protocol is executed, Orbit resumes the download process by trying to detect the 
target IP and then performing a compression algorithm on the path to store as a 
single file archive. This final archive is special and packed with additional 
bytes, which makes it unsuitable to easily unzip with existing compression 
tools.

A lockfile is required to exist in the current IP in order to download its 
dependencies.

Variable substitution is supported when specifying the "command" and "args"
fields for a protocol. Most notably, the queue is accessed as 
`{{ orbit.queue }}`. See `orbit help protocols` for more information about 
available variables.

This action may automatically run during an install if the package is missing
from the downloads. See `orbit help install` for more details.
"""

options."--list" = "Print URLs and exit"
options."--missing" = "Filter only uninstalled packages (default: true)"
options."--all" = "Gather packages from all dependency types"
options."--queue <dir>" = "Set the destination directory for placing fetched repositories"
options."--verbose" = "Display the custom protocol being executed"
options."--force" = "Download selected packages regardless of status"

examples = """
orbit download --missing --list
orbit download --all --force
"""

help = """
Fetch packages from the internet.

Usage:
    orbit download [options]

Options:
    --list              print URLs to the console and exit
    --missing           filter only uninstalled packages (default: true)
    --all               include dependencies of all types
    --queue <dir>       set the destination directory to place fetched codebase
    --verbose           display the command being executed
    --force             fallback to default protocol if missing given protocol
"""

# ------------------------------------------------------------------------------
# install         
# ------------------------------------------------------------------------------
[install]
name = "install"
summary = "store an immutable reference to an ip"
synopsis = "orbit install [options]"
description = """
This command will place an ip into the cache. By default, the specified version
is the 'latest' released version orbit can identify.

When this command is ran without specifying the <ip> or a source (such as
`--url` or `--path`), it will attempt to install the current working ip, if it
exists.

By default, any dependencies required only for development by the target ip are
omitted from installation. To also install these dependencies, use `--all`.

If a protocol is recognized using `--protocol`, then an optional tag can also 
be supplied to help the protocol with providing any additional information it
may require. 
"""

options."<ip>" = "Ip specification"
options."--url <url>" = "URL to install the ip from the internet"
options."--path <path>" = "Path to install the ip from local file system"
options."--protocol <name>" = "Use a configured protocol to download ip"
options."--tag <tag>" = "Unique tag to provide to the protocol"
options."--force" = "Install the ip regardless of the cache slot occupancy"
options."--list" = "View available protocols and exit"
options."--all" = "Install all dependencies (including development)"

examples = """
orbit install
orbit install lcd_driver:2.0
orbit install adder:1.0.0 --url https://my.adder/project.zip
orbit install alu:2.3.7 --path ./projects/alu --force 
"""

help = """
Store an immutable reference to an ip.

Usage:
    orbit install [options]

Options:
    <ip>                ip specification to install from catalog
    --url <url>         URL to install the ip from the internet
    --path <path>       ip's local path to install from filesystem
    --protocol <name>   defined protocol to download the package
    --tag <tag>         unique tag to pass to the protocol
    --all               install all dependencies including development
    --list              view available protocols and exit
    --verbose           display the command(s) being executed
    --force             install regardless of cache slot occupancy
"""

# ------------------------------------------------------------------------------
# env             
# ------------------------------------------------------------------------------
[env]
name = "env"
summary = "print orbit environment information"
synopsis = "orbit env [options]"
description = """
This command prints environment variables relevant to `orbit`.

By default, this command prins information as a shell script. If one or more
variable names are given as arguments as `<key>`, then it will print the value
of each provided variables on its own line.
"""

options."<key>..." = "Include this variable's value specifically in the environment information"

examples = """
orbit env
orbit env ORBIT_HOME
orbit env ORBIT_CACHE ORBIT_ARCHIVE
"""

help = """
Print orbit environment information.

Usage:
    orbit env [options]

Options:
    <key>...     Lookup environment variable to include its value
"""

# ------------------------------------------------------------------------------
# config          
# ------------------------------------------------------------------------------
[config]
name = "config"
summary = "modify configuration values"
synopsis = "orbit config [options]"
description = """
This command will alter configuration entries in Orbit's settings file named 
`config.toml`. By default, it will modify the user's config file found at
the path read from the environment variable `$ORBIT_HOME`.
  
To access an entry (key/value pair), use dots (`.`) to delimit between 
intermediate table identifiers and the final key identifier.

The command modifies the document in three independent stages. The first stage
modifies the settings by iterating through all defined `--append` values. Then, 
it will insert all `--set` values. Lastly, it will remove all `--unset` entries.
"""

options."--global" = "Access the home configuration file"
options."--local" = "Access the current project's configuration file"
options."--append <key=value>..." = "Add a value to the key storing a list"
options."--set <key=value>..." = "Write the value at the key's entry"
options."--unset <key>..." = "Delete the key's entry"

examples = """
orbit config --append include="~/.orbit/profiles/ks-tech"
orbit config --unset env.VIVADO_PATH --global
"""

help = """
Modify configuration values.

Usage:
    orbit config [options]

Options:
    --global                    access the home configuration file
    --local                     access the current project configuration file
    --append <key>=<value>...   add a value to a key storing a list
    --pop <key>...              remove the last value to a key storing a list
    --set <key>=<value>...      write the value at the key entry
    --unset <key>...            delete the key's entry
"""

# ------------------------------------------------------------------------------
# remove      
# ------------------------------------------------------------------------------
[remove]
name = "remove"
summary = "uninstall an ip from the catalog"
synopsis = "orbit remove [options] <ip>"
description = """
This command will remove known ip stored in the catalog. By default, it will
remove the ip from the cache. This include any dynamic entries spawned from the
requested ip to remove.

To remove the ip from the cache and downloads locations, use `--all`.
"""
options."<ip>" = "Ip specification"
options."--all" = "remove the ip from the cache and downloads"
options."--recurse, -r" = "fully remove the ip and its dependencies"

examples = """
orbit remove gates
orbit remove gates:1.0.0 --all
"""

help = """
Uninstall an ip from the catalog.

Usage:
    orbit remove [options] <ip>

Options:
    <ip>        ip specification to uninstall
    --all       remove the ip from the cache and downloads
    --recurse   fully remove the ip and its dependencies
"""

# ------------------------------------------------------------------------------
# orbit      
# ------------------------------------------------------------------------------
[orbit]
help = """
Orbit is an hdl package manager and build tool.

Usage:
    orbit [options] [command]

Commands:
    new             create a new ip
    init            initialize an ip from an existing project
    view            display metadata of an ip
    read            navigate hdl design unit source code
    get             fetch an entity
    tree            view the dependency graph
    lock            save the world state of the current ip
    test, t         run a test
    build, b        plan and execute a target
    publish         post an ip to a channel
    search          browse the ip catalog 
    download        request packages from the internet
    install         store an immutable reference to an ip
    env             print orbit environment information
    config          modify configuration values
    remove          uninstall an ip from the catalog

Options:
    --version       print version information and exit
    --upgrade       check for the latest orbit binary
    --force         bypass interactive prompts
    --color <when>  coloring: auto, always, never
    --help, -h      print help information

Use 'orbit help <command>' for more information about a command.
"""



# /*
# --*-- commands to remove --*--
#     edit            open an ip in a text editor
#     launch/publish          release a new ip version

# --*-- commands to add --*--
#     audit           verify a package is able to installed properly and release-able


# alt names for `probe`: -check-, -scan-, show
# */